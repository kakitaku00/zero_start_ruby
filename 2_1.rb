# puts => メソッド(命令)
# 1 => 整数オブジェクト オブジェクト(もの)
puts 1

puts 1 + 2 # => 3

# 引き算 -
# 掛け算 *
# 割り算 /
puts 2 - 1
puts 2 * 3
puts 4 / 2

puts 1 +  2 + 3

# ()があると先に実行される
puts (1+ 2)* 3

puts 5 / 2 # => 2
# Rubyは整数どうしの結果は整数になるというルール
# 2.5にするには小数点オブジェクトにして計算する
puts 5.0 / 2.0

# 累乗
puts 2 ** 8
# 剰余
puts 7 % 3

# 文字列はダブルコーテーションで囲む
puts "hello world!"

# 文字列を足す
puts "hello " + "world!"

# 整数と文字列を足すとエラーとなる
# puts 3 + "3"

# 整数を文字列に変換するto_sメソッド
# 文字列を整数に変換するto_iメソッド
# to(〜へ) s = string(文字列) i = integer(整数)
# メソッドはオブジェクトの後ろに.をつけて書く
puts 3.to_s + "3"
puts 3 + "3".to_i

# =================================================

# オブジェクトの種類のことをクラスという
# 整数オブジェクトInteger Integerがクラスの名前(Integerオブジェクトともいう)

# 変数とはオブジェクトにつける名札
# 変数 = オブジェクト 右辺を左辺に代入する
order = "カフェラテ"
puts order # => カフェラテ

# #{計算式}で文字列に計算式を埋め込める
puts "1 + 2の答えは、#{1 + 2}です" # 1 + 2の答えは、3です

# 式展開は変数も使用できる
puts "ご注文は#{order}ですね" #ご注文はカフェラテですね

# 変数の名前の戦闘は英字小文字、または_で始める必要がある
# NG => Order, ORDER 1x

# 2単語以上つなげる時は_を入れる(スネークケース)

# =================================================

# getメソッドを使用し、ターミナルから値を入力するプログラムを作成
x = gets
y = gets
# puts x + y => 2\n3n(文字列が入力される為)
puts x.to_i + y.to_i # => 5


# =================================================
=begin
複数行のコメントは=begeinから=endで囲む
=end

# =================================================
# 入力したプログラムをその場で実行させるirb
# irbは画面に表示させるメソッドは不要
# 終了する際はexitと入力
# プログラムの途中でirbを起動(binding.irb)
a = 1
binding.irb
puts a

